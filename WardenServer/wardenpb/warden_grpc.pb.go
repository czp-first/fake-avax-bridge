// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: wardenpb/warden.proto

package wardenpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WardenClient is the client API for Warden service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WardenClient interface {
	// rpc GetBridgeSettings(Empty) returns () {}
	GetCredential(ctx context.Context, in *GetCredentialReq, opts ...grpc.CallOption) (*GetCredentialResp, error)
	GetAwsCredential(ctx context.Context, in *AwsCredentialReq, opts ...grpc.CallOption) (*AwsCredentialResp, error)
	SaveShare(ctx context.Context, in *SaveShareReq, opts ...grpc.CallOption) (*Empty, error)
	GetShare(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ShareResp, error)
	GetWardenOnboard(ctx context.Context, in *GetWardenOnboardReq, opts ...grpc.CallOption) (*GetWardenOnboardResp, error)
	Onboard(ctx context.Context, in *OnboardReq, opts ...grpc.CallOption) (*Empty, error)
	GetWardenOffboard(ctx context.Context, in *GetWardenOffboardReq, opts ...grpc.CallOption) (*GetWardenOffboardResp, error)
	Offboard(ctx context.Context, in *OffboardReq, opts ...grpc.CallOption) (*Empty, error)
}

type wardenClient struct {
	cc grpc.ClientConnInterface
}

func NewWardenClient(cc grpc.ClientConnInterface) WardenClient {
	return &wardenClient{cc}
}

func (c *wardenClient) GetCredential(ctx context.Context, in *GetCredentialReq, opts ...grpc.CallOption) (*GetCredentialResp, error) {
	out := new(GetCredentialResp)
	err := c.cc.Invoke(ctx, "/wardenpb.Warden/GetCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardenClient) GetAwsCredential(ctx context.Context, in *AwsCredentialReq, opts ...grpc.CallOption) (*AwsCredentialResp, error) {
	out := new(AwsCredentialResp)
	err := c.cc.Invoke(ctx, "/wardenpb.Warden/GetAwsCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardenClient) SaveShare(ctx context.Context, in *SaveShareReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/wardenpb.Warden/SaveShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardenClient) GetShare(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ShareResp, error) {
	out := new(ShareResp)
	err := c.cc.Invoke(ctx, "/wardenpb.Warden/GetShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardenClient) GetWardenOnboard(ctx context.Context, in *GetWardenOnboardReq, opts ...grpc.CallOption) (*GetWardenOnboardResp, error) {
	out := new(GetWardenOnboardResp)
	err := c.cc.Invoke(ctx, "/wardenpb.Warden/GetWardenOnboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardenClient) Onboard(ctx context.Context, in *OnboardReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/wardenpb.Warden/Onboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardenClient) GetWardenOffboard(ctx context.Context, in *GetWardenOffboardReq, opts ...grpc.CallOption) (*GetWardenOffboardResp, error) {
	out := new(GetWardenOffboardResp)
	err := c.cc.Invoke(ctx, "/wardenpb.Warden/GetWardenOffboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardenClient) Offboard(ctx context.Context, in *OffboardReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/wardenpb.Warden/Offboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WardenServer is the server API for Warden service.
// All implementations must embed UnimplementedWardenServer
// for forward compatibility
type WardenServer interface {
	// rpc GetBridgeSettings(Empty) returns () {}
	GetCredential(context.Context, *GetCredentialReq) (*GetCredentialResp, error)
	GetAwsCredential(context.Context, *AwsCredentialReq) (*AwsCredentialResp, error)
	SaveShare(context.Context, *SaveShareReq) (*Empty, error)
	GetShare(context.Context, *Empty) (*ShareResp, error)
	GetWardenOnboard(context.Context, *GetWardenOnboardReq) (*GetWardenOnboardResp, error)
	Onboard(context.Context, *OnboardReq) (*Empty, error)
	GetWardenOffboard(context.Context, *GetWardenOffboardReq) (*GetWardenOffboardResp, error)
	Offboard(context.Context, *OffboardReq) (*Empty, error)
	mustEmbedUnimplementedWardenServer()
}

// UnimplementedWardenServer must be embedded to have forward compatible implementations.
type UnimplementedWardenServer struct {
}

func (UnimplementedWardenServer) GetCredential(context.Context, *GetCredentialReq) (*GetCredentialResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (UnimplementedWardenServer) GetAwsCredential(context.Context, *AwsCredentialReq) (*AwsCredentialResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAwsCredential not implemented")
}
func (UnimplementedWardenServer) SaveShare(context.Context, *SaveShareReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveShare not implemented")
}
func (UnimplementedWardenServer) GetShare(context.Context, *Empty) (*ShareResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShare not implemented")
}
func (UnimplementedWardenServer) GetWardenOnboard(context.Context, *GetWardenOnboardReq) (*GetWardenOnboardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWardenOnboard not implemented")
}
func (UnimplementedWardenServer) Onboard(context.Context, *OnboardReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Onboard not implemented")
}
func (UnimplementedWardenServer) GetWardenOffboard(context.Context, *GetWardenOffboardReq) (*GetWardenOffboardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWardenOffboard not implemented")
}
func (UnimplementedWardenServer) Offboard(context.Context, *OffboardReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Offboard not implemented")
}
func (UnimplementedWardenServer) mustEmbedUnimplementedWardenServer() {}

// UnsafeWardenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WardenServer will
// result in compilation errors.
type UnsafeWardenServer interface {
	mustEmbedUnimplementedWardenServer()
}

func RegisterWardenServer(s grpc.ServiceRegistrar, srv WardenServer) {
	s.RegisterService(&Warden_ServiceDesc, srv)
}

func _Warden_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardenServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wardenpb.Warden/GetCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardenServer).GetCredential(ctx, req.(*GetCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warden_GetAwsCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AwsCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardenServer).GetAwsCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wardenpb.Warden/GetAwsCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardenServer).GetAwsCredential(ctx, req.(*AwsCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warden_SaveShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveShareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardenServer).SaveShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wardenpb.Warden/SaveShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardenServer).SaveShare(ctx, req.(*SaveShareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warden_GetShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardenServer).GetShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wardenpb.Warden/GetShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardenServer).GetShare(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warden_GetWardenOnboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWardenOnboardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardenServer).GetWardenOnboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wardenpb.Warden/GetWardenOnboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardenServer).GetWardenOnboard(ctx, req.(*GetWardenOnboardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warden_Onboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnboardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardenServer).Onboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wardenpb.Warden/Onboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardenServer).Onboard(ctx, req.(*OnboardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warden_GetWardenOffboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWardenOffboardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardenServer).GetWardenOffboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wardenpb.Warden/GetWardenOffboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardenServer).GetWardenOffboard(ctx, req.(*GetWardenOffboardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warden_Offboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OffboardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardenServer).Offboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wardenpb.Warden/Offboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardenServer).Offboard(ctx, req.(*OffboardReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Warden_ServiceDesc is the grpc.ServiceDesc for Warden service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Warden_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wardenpb.Warden",
	HandlerType: (*WardenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCredential",
			Handler:    _Warden_GetCredential_Handler,
		},
		{
			MethodName: "GetAwsCredential",
			Handler:    _Warden_GetAwsCredential_Handler,
		},
		{
			MethodName: "SaveShare",
			Handler:    _Warden_SaveShare_Handler,
		},
		{
			MethodName: "GetShare",
			Handler:    _Warden_GetShare_Handler,
		},
		{
			MethodName: "GetWardenOnboard",
			Handler:    _Warden_GetWardenOnboard_Handler,
		},
		{
			MethodName: "Onboard",
			Handler:    _Warden_Onboard_Handler,
		},
		{
			MethodName: "GetWardenOffboard",
			Handler:    _Warden_GetWardenOffboard_Handler,
		},
		{
			MethodName: "Offboard",
			Handler:    _Warden_Offboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wardenpb/warden.proto",
}
